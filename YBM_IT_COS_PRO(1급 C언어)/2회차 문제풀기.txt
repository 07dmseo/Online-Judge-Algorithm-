1번 문제
- first.rank < second.rank
- first.rank > second.rank
- students[i].student_number = student_numbers[i];
- students[i].rank = ranks[i];
- students[i].student_number;

2번 문제
- current_time
- subway_time[i]
- current_minute < subway_minute

3번 문제
- func_b(next_num)
- func_a(length/2)
- func_c(front), func_c(back)

4번 문제
int comb(int arr[], int len, int K, int idx, int sum, int r)
{
    int ans = 0;
    if(!r) {
        if(!(sum % K)) return 1;
        else return 0;
    }
    for (int i = idx; i < len; i++) {
        sum += arr[i];
        ans += comb(arr, len, K, i + 1, sum, r - 1);
        sum -= arr[i];
    }
    return ans;
}

int solution(......)
{
    int answer = comb(arr, len, K, 0, 0, 3);
    return answer;
}

5번 문제
int *dp = (int *)malloc(sizeof(int)*arr_len);
for (int i = 0; i < arr_len; i++) dp[i] = 0;
for (int i = 0; i < arr_len; i++) {
    if (!i) dp[i] = 1;
    else if (arr[i - 1] < arr[i]) dp[i] = dp[i - 1] + 1;
    else dp[i] = 1;
}
for (int i = 0; i < arr_len; i++) {
    answer = answer > dp[i] ? answer : dp[i];
}

6번 문제
int *answer; answer = (int *)malloc(sizeof(int) * 2);
answer[0] = 0, answer[1] = 0;
int idx = 0, dx[] = { 1,0,-1,0 }, dy[] = { 0,1,0,-1 };
while (commands[idx] != NULL) {
	int d = 0;
	switch (commands[idx]) {
	case 'D': d = 3; break;
	case 'U': d = 1; break;
	case 'R': d = 0; break;
	case 'L': d = 2; break;
	}
	answer[0] += dx[d], answer[1] += dy[d], idx++;
}
return answer;

7번 문제(빈칸 채우기)
- counter += money/coin[idx];
- money %= coin[idx];
- idx -= 1;

8번 문제
- 10번째 줄, left % 2 --> idx % 2로 수정

9번 문제
- 10번째 줄, secondCheck = password[i] - password[i + 1] --> password[i + 2] - password[i + 1]로 수정

10번 문제
- 10번째 줄, else --> else if(s[i] == '1')